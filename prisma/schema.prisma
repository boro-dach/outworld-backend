// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum Jobs {
  BANKER
  BUSINESSMAN
  JOURNALIST
  OTHER
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  login  String
  password  String
  role      UserRole @default(USER)
  isVerified Boolean @default(false)
  jobs Jobs[]

  applications Application[]
  articles Article[]
  articleLikes ArticleLike[]
  orders Order[]
  cards Card[]
  companies Company[] @relation("employees")
  companyCeo Company[] @relation("CEO")

  initiatedTransactions Transaction[] @relation("InitiatedByUser")
  confirmedTransactions Transaction[] @relation("ConfirmedByBanker")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Application {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String

  status ApplicationStatus @default(PENDING)
  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ArticleType {
  WEBSITE
  TECH
  SERVER
}

model Article {
  id String @id @default(cuid())

  user User @relation(fields: [userId], references: [id])
  userId String

  title String
  text String
  type ArticleType

  likes ArticleLike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArticleLike {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  
  createdAt DateTime @default(now())

  @@id([userId, articleId])
}

enum OrderStatus {
  CREATED
  PROCESSING
  EN_ROUTE
  DELIVERED
  CANCELLED
}

model Order {
  id String @id @default(cuid())

  playerUuid String
  status OrderStatus @default(CREATED)
  items     OrderItem[]

  user User @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id       String  @id @default(cuid())
  name     String
  quantity Int
  price    Float
  order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  String
}

model Card {
  id String @id @default(cuid())

  title String
  credits Int @default(0)
  cardNumber String @unique

  user User @relation(fields: [userId], references: [id])
  userId String

  transactions Transaction[]
  relatedTransactions   Transaction[] @relation("RelatedCardTransactions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  TRANSFER_IN
  TRANSFER_OUT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Transaction {
  id String @id @default(cuid())

  type TransactionType
  status TransactionStatus @default(PENDING)
  amount Int
  confirmationCode String?  @unique 

  confirmedByBankerId String?
  confirmedByBanker   User?  @relation("ConfirmedByBanker", fields: [confirmedByBankerId], references: [id])

  relatedCardId String?
  relatedCard   Card?    @relation("RelatedCardTransactions", fields: [relatedCardId], references: [id])

  cardId     String
  card       Card     @relation(fields: [cardId], references: [id])
  
  userId     String
  user       User     @relation("InitiatedByUser", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SalaryType {
  FIXED
  RANGE
}

enum PaymentPeriod {
  PER_TASK  
  PER_HOUR  
  PER_DAY   
  PER_WEEK  
  PER_MONTH 
}

model Salary {
  id String @id @default(cuid())

  type SalaryType
  fixedAmount Int?
  minAmount Int?
  maxAmount Int?

  period PaymentPeriod

  vacancy   Vacancy @relation(fields: [vacancyId], references: [id], onDelete: Cascade)
  vacancyId String  @unique
}

model Vacancy {
  id String @id @default(cuid())

  title String
  description String

  salary Salary?

  occupation Jobs

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id String @id @default(cuid())

  title String
  description String

  employees User[] @relation("employees")

  ceo User @relation("CEO", fields: [ceoId], references: [id])
  ceoId String

  vacancies Vacancy[]
}