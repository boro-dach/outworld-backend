// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  login  String
  password  String
  role      UserRole @default(USER)
  isVerified Boolean @default(false)

  applications Application[]
  articles Article[]
  orders Order[]

  accessToken String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Application {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String

  status ApplicationStatus @default(PENDING)
  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id String @id @default(cuid())

  User User @relation(fields: [userId], references: [id])
  userId String

  title String
  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  CREATED
  PROCESSING
  EN_ROUTE
  DELIVERED
  CANCELLED
}

model Order {
  id String @id @default(cuid())

  playerUuid String
  status OrderStatus @default(CREATED)
  items     OrderItem[]

  User User @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id       String  @id @default(cuid())
  name     String
  quantity Int
  price    Float
  order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  String
}